// <auto-generated />
using System;
using APiAuthTest.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APiAuthTest.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20221123223838_permission1")]
    partial class permission1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("APiAuthTest.Model.UserModel.Permissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RolesId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("APiAuthTest.Model.UserModel.Personne", b =>
                {
                    b.Property<int>("IdPersonne")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPersonne"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPersonne");

                    b.ToTable("Personne");
                });

            modelBuilder.Entity("APiAuthTest.Model.UserModel.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("APiAuthTest.Model.UserModel.Token", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Token");
                });

            modelBuilder.Entity("APiAuthTest.Model.UserModel.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("personneIdPersonne")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("personneIdPersonne");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PermissionsUser", b =>
                {
                    b.Property<int>("permissionsId")
                        .HasColumnType("int");

                    b.Property<int>("usersId")
                        .HasColumnType("int");

                    b.HasKey("permissionsId", "usersId");

                    b.HasIndex("usersId");

                    b.ToTable("PermissionsUser");
                });

            modelBuilder.Entity("RolesUser", b =>
                {
                    b.Property<int>("rolesId")
                        .HasColumnType("int");

                    b.Property<int>("usersId")
                        .HasColumnType("int");

                    b.HasKey("rolesId", "usersId");

                    b.HasIndex("usersId");

                    b.ToTable("RolesUser");
                });

            modelBuilder.Entity("APiAuthTest.Model.UserModel.Permissions", b =>
                {
                    b.HasOne("APiAuthTest.Model.UserModel.Roles", null)
                        .WithMany("permissions")
                        .HasForeignKey("RolesId");
                });

            modelBuilder.Entity("APiAuthTest.Model.UserModel.Token", b =>
                {
                    b.HasOne("APiAuthTest.Model.UserModel.User", null)
                        .WithMany("token")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("APiAuthTest.Model.UserModel.User", b =>
                {
                    b.HasOne("APiAuthTest.Model.UserModel.Personne", "personne")
                        .WithMany()
                        .HasForeignKey("personneIdPersonne");

                    b.Navigation("personne");
                });

            modelBuilder.Entity("PermissionsUser", b =>
                {
                    b.HasOne("APiAuthTest.Model.UserModel.Permissions", null)
                        .WithMany()
                        .HasForeignKey("permissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APiAuthTest.Model.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("usersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RolesUser", b =>
                {
                    b.HasOne("APiAuthTest.Model.UserModel.Roles", null)
                        .WithMany()
                        .HasForeignKey("rolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APiAuthTest.Model.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("usersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("APiAuthTest.Model.UserModel.Roles", b =>
                {
                    b.Navigation("permissions");
                });

            modelBuilder.Entity("APiAuthTest.Model.UserModel.User", b =>
                {
                    b.Navigation("token");
                });
#pragma warning restore 612, 618
        }
    }
}
